{"version":3,"sources":["components/Slider.js","components/Home.js","App.js","serviceWorker.js","index.js","components/home.jpg","components/FremontTroll.jpg","components/PikePlaceMarket.jpg","components/GumWall.jpg"],"names":["console","log","home","FremontTroll","PikePlaceMarket","GumWall","SimpleSlider","react_default","a","createElement","lib_default","dots","infinite","speed","slidesToShow","slidesToScroll","fit","src","alt","React","Component","LinkTab","props","Tab_default","Object","assign","component","onClick","event","preventDefault","styles","backgroundImage","concat","HomeImage","Home","state","value","handleChange","_this","setState","classes","this","NoSsr_default","className","root","AppBar_default","position","Tabs_default","variant","onChange","label","href","Slider_SimpleSlider","withStyles","App","BrowserRouter","basename","process","Route","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.24e32703.chunk.js","sourcesContent":["import React from 'react';\nimport Slider from \"react-slick\";\nimport home from './home.jpg';\nimport FremontTroll from './FremontTroll.jpg';\nimport PikePlaceMarket from './PikePlaceMarket.jpg';\nimport GumWall from './GumWall.jpg';\n\nconsole.log(home);\nconsole.log(FremontTroll);\nconsole.log(PikePlaceMarket);\nconsole.log(GumWall);\n\n\nexport default class SimpleSlider extends React.Component {\n\n  render() {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1}\n      \n    return (\n\n  <Slider {...settings}>    \n  <img\n  fit=\"contain\"\n  src= {home} alt=\"Seattle Skyline\" />\n  <img\n  fit=\"contain\"\n  src= {FremontTroll} alt=\"The Fremont Troll in Seattle.\"/>\n  <img\n  fit=\"contain\"\n  src={PikePlaceMarket} alt=\"Pike Place Market in Downtown Seattle.\"/>\n  <img\n  fit=\"contain\"\n  src= {GumWall} alt=\"The Famous Gum Wall.\"/>\n  </Slider> \n    );\n  }\n} \n","\n/** Just the tab bars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport HomeImage from './home.jpg';\nimport SimpleSlider from \"./Slider\"\n\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nfunction LinkTab(props) {\n  return <Tab component=\"a\" onClick={event => event.preventDefault()} {...props} />;\n}\nconst styles = {backgroundImage: `url(${ HomeImage })`}\n\nclass Home extends React.Component {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div> \n        <NoSsr>\n            <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs variant=\"fullWidth\" value={value} onChange={this.handleChange}>\n                <LinkTab label=\"Home\" href=\"Home\" />\n                <LinkTab label=\"Community\" href=\"Community\" />\n                <LinkTab label=\"Transporation\" href=\"Transporation\" />\n                <LinkTab label=\"Landmarks\" href=\"Landmarks\" />\n                <LinkTab label=\"Cafes\" href=\"Cafes\" />\n                </Tabs>\n            </AppBar>\n            </div>\n        </NoSsr>\n        <SimpleSlider/>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Home);\n","import React, {Component}from 'react';\nimport{BrowserRouter, Route} from 'react-router-dom';\n\nimport Home from \"./components/Home\";\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = {}\n\nclass App extends Component{\n  render (){\n    return(\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div>\n    \n        <Route path = \"/\" component={Home} exact />\n        <Route path = \"/Community\" component={Home} exact />\n        <Route path = \"/Transportation\" component={Home} exact />\n        <Route path = \"/Landmarks\" component={Home} exact />\n        <Route path = \"/Cafes\" component={Home} exact />\n        \n        </div>\n        </BrowserRouter>\n    );\n\n  }\n}\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/home.908f2c87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/FremontTroll.064536ee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/PikePlaceMarket.7abf633c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/GumWall.cf7c305d.jpg\";"],"sourceRoot":""}