{"map":"{\"version\":3,\"sources\":[\"/Users/keristianfarra/Desktop/hcde49-testrun/src/App.js\",\"/Users/keristianfarra/Desktop/hcde49-testrun/src/serviceWorker.js\",\"/Users/keristianfarra/Desktop/hcde49-testrun/src/index.js\",\"/Users/keristianfarra/Desktop/hcde49-testrun/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/keristianfarra/Desktop/hcde49-testrun/src/logo.svg\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"handleClick\",\"console\",\"log\",\"setState\",\"numClicks\",\"state\",\"react_default\",\"a\",\"createElement\",\"className\",\"class\",\"src\",\"alt\",\"Button_default\",\"variant\",\"color\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"qNA0DeA,cArDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKNQ,YAAa,WACXC,QAAQC,IAAI,eACVT,EAAKU,SAAS,CACZC,UAAUX,EAAKY,MAAMD,UAAU,KAPnCX,EAAKY,MAAM,CACTD,UAAU,GAHEX,wEAahB,OACEa,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,MAAM,QACXJ,EAAAC,EAAAC,cAAA,SAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,iCAEFF,EAAAC,EAAAC,cAAA,SAAA,KACEF,EAAAC,EAAAC,cAAA,MAAA,CAAKG,IAAI,YAAYC,IAAI,2BAG3BN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,QAAQ,YACRC,MAAM,UACNC,QAAUpB,KAAKI,aAHjB,kBAMAM,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,QAAQ,YACRC,MAAM,UACNC,QAAUpB,KAAKI,aAHjB,aAMAM,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,QAAQ,YACRC,MAAM,UACNC,QAAUpB,KAAKI,aAHjB,SAMAM,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,QAAQ,YACRC,MAAM,UACNC,QAAUpB,KAAKI,aAHjB,sBA1CYiB,EAAAA,WCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport Button from '@material-ui/core/Button';\\nclass App extends Component {\\n  constructor(props){\\n    super(props);\\n      this.state={\\n        numClicks:0\\n      }\\n    }\\n    handleClick= ()=>{\\n      console.log(\\\"hello world\\\");\\n        this.setState({\\n          numClicks:this.state.numClicks+1\\n        });\\n      }\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n      <div class='page'>\\n      <header>\\n        <h1>Explore Seattle like a local</h1>\\n      </header>\\n      <figure>\\n        <img src=\\\"/home.jpg\\\" alt=\\\"A picture of Seattle.\\\"/>\\n      </figure>\\n      {/* <!-- Buttons --> */}\\n      <Button\\n        variant=\\\"contained\\\" \\n        color=\\\"primary\\\" \\n        onClick= {this.handleClick}>\\n        Transportation\\n        </Button>\\n      <Button\\n        variant=\\\"contained\\\" \\n        color=\\\"primary\\\" \\n        onClick= {this.handleClick}>\\n        Landmarks\\n      </Button>\\n      <Button\\n        variant=\\\"contained\\\" \\n        color=\\\"primary\\\" \\n        onClick= {this.handleClick}>\\n        Cafes\\n      </Button>\\n      <Button\\n        variant=\\\"contained\\\" \\n        color=\\\"primary\\\" \\n        onClick= {this.handleClick}>\\n        Community\\n      </Button>\\n    </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{142:function(e,n,t){\"use strict\";t.r(n);var a=t(1),o=t.n(a),i=t(16),c=t.n(i),l=(t(57),t(46)),r=t(47),s=t(50),m=t(48),u=t(51),d=(t(58),t(59),t(17)),h=t.n(d),p=function(e){function n(e){var t;return Object(l.a)(this,n),(t=Object(s.a)(this,Object(m.a)(n).call(this,e))).handleClick=function(){console.log(\"hello world\"),t.setState({numClicks:t.state.numClicks+1})},t.state={numClicks:0},t}return Object(u.a)(n,e),Object(r.a)(n,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"div\",{class:\"page\"},o.a.createElement(\"header\",null,o.a.createElement(\"h1\",null,\"Explore Seattle like a local\")),o.a.createElement(\"figure\",null,o.a.createElement(\"img\",{src:\"/home.jpg\",alt:\"A picture of Seattle.\"})),o.a.createElement(h.a,{variant:\"contained\",color:\"primary\",onClick:this.handleClick},\"Transportation\"),o.a.createElement(h.a,{variant:\"contained\",color:\"primary\",onClick:this.handleClick},\"Landmarks\"),o.a.createElement(h.a,{variant:\"contained\",color:\"primary\",onClick:this.handleClick},\"Cafes\"),o.a.createElement(h.a,{variant:\"contained\",color:\"primary\",onClick:this.handleClick},\"Community\")))}}]),n}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},52:function(e,n,t){e.exports=t(142)},57:function(e,n,t){},58:function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},59:function(e,n,t){}},[[52,1,2]]]);","extractedComments":[]}